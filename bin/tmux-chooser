#!/usr/bin/python

import subprocess
import re
import sys

p = subprocess.Popen(['/usr/bin/tmux','list-windows','-a'],
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE)
stdout, stderr = p.communicate()

class Session:
    def __init__(self, name):
        self.windows = {}
        self.active_window = -1
        self.name = name

    def __str__(self):
        window_strs = []
        for window_id, window_name in self.windows.items():
            if window_id == self.active_window:
                format_str = '[{}:{}]'
            else:
                format_str = '{}:{}'
            window_strs += [format_str.format(window_id, window_name)]
        result_str = '{} -- '.format(self.name) + ", ".join(window_strs)
        return result_str

# Accumulate list-windows output
session_dict = {}
for line in stdout.split('\n'):
    result = re.match(r'(\S*):(\S*):\s*(\S*)\s[^\(]*(\(active\))?', line)
    if result:
        session_name, window_id, window_name, active_str = result.groups()
        try:
            session_dict[session_name]
        except KeyError:
            session_dict[session_name] = Session(session_name)
        session_dict[session_name].windows[window_id] = window_name
        if active_str:
            session_dict[session_name].active_window = window_id

# Show chooser
session_list = session_dict.values()
if len(session_list):
    print >>sys.stderr, "Existing sessions:"
    for i in range(len(session_list)):
        print >>sys.stderr, '    [{}] {}'.format(i, session_list[i])
    #        print result.groups()
    print >>sys.stderr, "Choose one between 0 and {} [0]:".format(i),
    try:
        choice = int(raw_input())
    except ValueError:
        choice = 0
    if not choice in xrange(len(session_list)):
        choice = 0
    session_name = session_list[choice].name
    print "attach -t {}".format(session_name)

else:
    print " ".join(sys.argv[1:])
