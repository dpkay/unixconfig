#!/usr/bin/python3
# Returns proper args for tmux

import subprocess
import re
import os
import sys

args = " ".join(sys.argv[1:])
p = subprocess.Popen('which tmux',
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE,
                     encoding='utf8',
                     shell=True)
stdout, stderr = p.communicate()
tmux_path = stdout.strip()
if stderr or not os.path.exists(tmux_path):
  print("Unable to obtain tmux path!", file=sys.stderr)
  sys.exit(1)

p = subprocess.Popen([tmux_path,'list-windows','-a'],
                     stdout=subprocess.PIPE,
                     stderr=subprocess.PIPE,
                     encoding='utf8')
stdout, stderr = p.communicate()

class Session:
    def __init__(self, name):
        self.windows = {}
        self.active_window = -1
        self.name = name

    def __str__(self):
        window_strs = []
        for window_id, window_name in self.windows.items():
            if window_id == self.active_window:
                format_str = '[{}:{}]'
            else:
                format_str = '{}:{}'
            window_strs += [format_str.format(window_id, window_name)]
        result_str = '{} -- '.format(self.name) + ", ".join(window_strs)
        return result_str

# Accumulate list-windows output
session_dict = {}
for line in stdout.split('\n'):
    result = re.match(r'([^:]*):([^:]*):\s*(\S*)\s[^\(]*(\(active\))?', line)
    if result:
        session_name, window_id, window_name, active_str = result.groups()
        session_name = session_name.strip()
        window_id = window_id.strip()
        window_name = window_name.strip()
        try:
            session_dict[session_name]
        except KeyError:
            session_dict[session_name] = Session(session_name)
        session_dict[session_name].windows[window_id] = window_name
        if active_str:
            session_dict[session_name].active_window = window_id

# Show chooser
session_list = [None] + list(session_dict.values())
if len(sys.argv)<2 and len(session_list)>1:
    print("Existing sessions:", file=sys.stderr)
    for i in range(1, len(session_list)):
        print('    [{}] {}'.format(i, session_list[i]), file=sys.stderr)

    print("", file=sys.stderr)
    if 'TMUX' in os.environ.keys():
        print("You are already in a tmux session. Aborting.", file=sys.stderr)
        sys.exit(1)

    else:
        print("Choose a session or hit ENTER to start a new one: ".format(
                len(session_list)), end="", file=sys.stderr)
        try:
            choice_str = input()
        except (EOFError,            # Ctrl-D
                KeyboardInterrupt):  # Ctrl-C
            print("", file=sys.stderr)
            print("EOF error. Aborting.", file=sys.stderr)
            sys.exit(1)

        if choice_str == '':
            print("new-session")
        else:
            try:
                choice = int(choice_str)
            except ValueError:
                choice = -1
            if not choice in range(1, len(session_list)):
                print(
                    "Invalid choice '{}'. Aborting.".format(choice_str), file=sys.stderr)
                sys.exit(1)
            else:
                session_name = session_list[choice].name
                print("attach -t {}".format(session_name), file=sys.stderr)

else:
    print(args)
